#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:8-onbuild already run npm install and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0


function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all package elements from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -av $LOCAL_SOURCE_DIR/$1/* $DEPLOY_DIR 2> /dev/null
  fi
}

function remove_elements() {
    if [ -d $LOCAL_SOURCE_DIR/package ]; then
        echo "Removing uncompressed elements"
        rm -rf $LOCAL_SOURCE_DIR/package
    fi

    echo "Removing tarball"
    rm -f $LOCAL_SOURCE_DIR/*.tgz

    echo "Removing .s2i"
    rm -rf $LOCAL_SOURCE_DIR/.s2i
}


shopt -s dotglob

echo "---> ************** (PRE ASSEMBLE) "

date

LOCAL_SOURCE_DIR=/tmp/src
DEPLOY_DIR=${HOME}

echo "Pre assemble parameters"
echo "LOCAL_SOURCE_DIR: $LOCAL_SOURCE_DIR"
echo "DEPLOY_DIR: $DEPLOY_DIR"
echo "NODEJS_PACKAGE_TAG: ${NODEJS_PACKAGE_TAG}"
echo "NODEJS_PACKAGE_TARBALL: ${NODEJS_PACKAGE_TARBALL}"
echo "IS_SCOPED_PACKAGE: ${NODEJS_IS_SCOPED_PACKAGE}"
echo "ARTIFACTORY_NPM_REPO: ${ARTIFACTORY_NPM_REPO}"

if [ -z "${NODEJS_PACKAGE_TAG}" ]; then
    echo "Aborting due to NODEJS_PACKAGE_TAG environment variable is not setted"
    exit 1
fi

if [ -z "${NODEJS_PACKAGE_TARBALL}" ]; then
    echo "Aborting due to NODEJS_PACKAGE_TARBALL environment variable is not setted"
    exit 1
fi

if [ -z "${NODEJS_IS_SCOPED_PACKAGE}" ]; then
    echo "Aborting due to NODEJS_IS_SCOPED_PACKAGE environment variable is not setted"
    exit 1
fi

echo "---> Node version"
node --version

echo "---> NPM version"
npm --version

if [ -z "${ARTIFACTORY_NPM_REPO}" ]; then
    echo "ARTIFACTORY_NPM_REPO variable is not setted "
else
    npm config set registry  ${ARTIFACTORY_NPM_REPO}
fi

echo "---> Registry location"
npm config get registry

cd "$LOCAL_SOURCE_DIR"

echo "---> NPM view tarball"
npm view ${NODEJS_PACKAGE_TAG} dist.tarball

echo "---> NPM get tarball"
npm pack ${NODEJS_PACKAGE_TAG}

echo "---> tar artifact"
tar -xvzf ${NODEJS_PACKAGE_TARBALL}

ERR=$?

if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from tar"
    exit $ERR
fi

if [ -d "$LOCAL_SOURCE_DIR/package" ]; then
    #Copying module elements
    copy_artifacts "package"
else
    echo "Aborting due to error code 1 from copying module elements"
    exit 1
fi

#Removing elements
remove_elements

echo "ls -al ($LOCAL_SOURCE_DIR)"
ls -al


#Change to $HOME
cd $HOME

echo "ls -al ($HOME)"
ls -al


echo "Executing original assembling"
/usr/libexec/s2i/assemble
