#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:8-onbuild already run npm install and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0


LOCAL_SOURCE_DIR=/tmp/src
DEPLOY_DIR=${HOME}
PACKAGE_NAME = ${NODEJS_PACKAGE_NAME}
IS_SCOPED_PACKAGE = ${NODEJS_IS_SCOPED_PACKAGE}

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all package elements from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/* $DEPLOY_DIR 2> /dev/null
  fi
}

function remove_elements() {
    if [ -d $LOCAL_SOURCE_DIR/package ]; then
        echo "Removing uncompressed elements"
        rm -rf $LOCAL_SOURCE_DIR/package
    fi

    echo "Removing tarball"
    rm -f $LOCAL_SOURCE_DIR/*.tgz
}


shopt -s dotglob


echo "---> ************** (PRE ASSEMBLE) "

echo "---> Node version"
node --version

echo "---> NPM version"
npm --version

echo "---> Registry location"
npm config get registry

cd "$LOCAL_SOURCE_DIR"

echo "---> NPM view tarball"
npm view $PACKAGE_NAME dist.tarball

echo "---> NPM get tarball"
npm pack $PACKAGE_NAME

echo "---> tar artifact"
tar -xvzf keedio-nodejs-helloworld-1.0.2.tgz

ERR=$?

if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from tar"
    exit $ERR
fi

if [ -d "$LOCAL_SOURCE_DIR/package" ]; then
    #Copying module elements
    copy_artifacts "package"
else
    echo "Aborting due to error code 1 from copying module elements"
    exit 1
fi

#Removing elements
remove_elements

#Change to $HOME
cd $HOME


echo "Executing original assembling"
/usr/libexec/s2i/assemble
